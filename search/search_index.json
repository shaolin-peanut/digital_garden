{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my digital garden!","text":"<ul> <li>I will share my most developed/useful notes here.</li> <li>If you're using Obsidian, the setup is pretty simple. It's a template you can use (click here, then clone into Obsidian, and then you drag and drop files to a folder to get them published.</li> </ul>"},{"location":"Intelligent%20Reading/","title":"Intelligent Reading","text":""},{"location":"Intelligent%20Reading/#about","title":"About","text":"<ul> <li>Intelligent Reading, taken from How to Read a Book - Mortimer Adler, is raising the art of reading above the elementary level, which is just understanding words and sentences, to superior levels, which are inspectional reading, analytical reading and syntopical reading, that allow one to get more comprehension out of a text.</li> <li>3 types of reading, 3 types of notes<ul> <li>Inspectional Reading produces structural notes mainly, Analytical Reading leads to conceptual notes, and Syntopical Reading leads to dialectical notes (notes about the shape of the discussion several authors engage in)</li> </ul> </li> </ul>"},{"location":"Intelligent%20Reading/#how-to","title":"How to","text":"<ul> <li>The 4 questions at the core of Active Reading, that you will attempt to answer using the methods outlined below<ol> <li>What is the book about as a whole? (theme and structure)</li> <li>What is being said in detail, and how? (ideas, assertions and arguments that constitute the author's message)</li> <li>Is the book true, in whole or in part? (make up your own mind)</li> <li>What of it? (what is the significance of its message to you, how does it impact your worldview, how does it interact with other things you know, what is implied/suggested that requires further investigation?)</li> </ol> </li> <li> </li> <li> </li> <li> </li> </ul>"},{"location":"Intelligent%20Reading/#inspectional-reading","title":"Inspectional Reading","text":"<ul> <li> <p>It should never take more than an active uninterrupted hour on it.</p> </li> <li> <p>The purpose of inspectional reading is to inspect the book in order to determine what it says, how it's structured, and to determine whether it deserves further reading.</p> </li> <li> </li> <li> </li> </ul>"},{"location":"Intelligent%20Reading/#systematic-skimming","title":"Systematic Skimming","text":"<ol> <li>Identify the aim/scope of the book, as well as the angle taken by the author, by reading the title page, preface and the publisher's blurb</li> <li>Study the table of contents to get an idea of the big ideas of the book and the skeleton of the content (map of the book)</li> <li>Scan the index to see either influences or terms that are frequently recurring throughout. Optionally, look up some passages involving the recurring words, they may touch on the \"crux\" of the book/unique angle of the author<ol> <li> <p>By this point, you can determine whether the book is worth reading or not. You may discard it forever, or go further.</p> </li> </ol> </li> <li>Identify chapters that seem to have pivotal arguments, read the prefacing/ending summaries if they exist, of the first and last paragraphs</li> <li>Thumb through the book, read a paragraph here and there and try to follow the pulsebeat of matter, the line of thought beneath the mountain of words</li> <li>Read the conclusion/epilogue if there is, or whatever chapter/section that seems to conclude/summarize the whole book.</li> </ol>"},{"location":"Intelligent%20Reading/#superficial-reading","title":"Superficial Reading","text":"<ul> <li>Read the book entirely, move fast over the things you don't understand, enjoy the things that you do understand. The goal here is to get the big picture of the book</li> </ul>"},{"location":"Intelligent%20Reading/#analytical-reading","title":"Analytical Reading","text":"<ul> <li> Do Inspectional Reading on a 100 books (easy if you follow the 1hr max rule), before going into this</li> </ul>"},{"location":"Intelligent%20Reading/#syntopical-reading-for-much-later","title":"Syntopical Reading (for much later)","text":""},{"location":"Intelligent%20Reading/#best-links-on-this-topic","title":"Best Links on this Topic","text":""},{"location":"Intelligent%20Reading/#related","title":"Related","text":""},{"location":"ft_irc/","title":"Ft irc","text":""},{"location":"ft_irc/#desired-end-state","title":"Desired End State","text":""},{"location":"ft_irc/#desired-end-date","title":"Desired End Date","text":""},{"location":"ft_irc/#journal","title":"Journal","text":"<ul> <li>What is an irc server?<ul> <li>IRC is a internet relay chat protocol. There is a specification to follow to write servers, clients, and other irc-related tools, so that they may be compatible. If you don't follow the spec you're out of the network, you're not irc, basically. That's the same with webservers for example, follow the specs so that your webapps are accepted/accessible by the browser.</li> <li>Features include (these are the main ones we have to implement)<ul> <li>Creating users, with nicknames, passwords, etc</li> <li>Operators, which are users that have administrative rights in a channel</li> <li>Messaging to channels (forwards to every client that joined the channel), creating channels, changing the topic</li> <li>Commands in the <code>/CMD</code> format, which enable different actions<ul> <li>for operators only<ul> <li>/KICK (to implement)</li> <li>/MODE</li> <li>/INVITE</li> <li>/TOPIC</li> </ul> </li> <li>for all</li> </ul> </li> </ul> </li> </ul> </li> <li>What are the basic tasks of an irc server?<ul> <li>define the protocol = a.k.a what messages can be sent, received, etc</li> <li>implement the server logic<ul> <li>handle incoming client connections<ul> <li>that's what ldominiq has done in some way</li> </ul> </li> <li>authenticate clients<ul> <li>How is client authentication working?</li> </ul> </li> <li>manage channels and messages<ul> <li>Which commands do we have to implement, and how are we going to manage them in general?</li> </ul> </li> </ul> </li> <li>concurrency (has to handle multiple client connections at the same time)</li> </ul> </li> <li>Automated testing<ul> <li>I want to set up automated [[testing (code)]]. I will use catch2 because it's compatible with cmake and clion, and easy to setup apparently.<ul> <li>If I want to test with irssi, I have to write a bash testing script, don't want to do this for now</li> <li>I can code up a client, it's actually simpler and this way I can test all sorts of specific scenarios. Chatgpt's advice<ul> <li>Create client socket with <code>socket</code></li> <li>send messages to server (connection procedure, emulate irssi) in irc format</li> <li>receive msgs from server with <code>recv</code></li> <li>Connect and join channel sequence code (footnote 1)</li> </ul> </li> </ul> </li> </ul> </li> <li>I want to use [[design patterns]]<ul> <li>Subject/Observer<ul> <li>For channels, the subject (channel), can hold a list of its (observers), and notify them of any change in the status of the subject (new message). Pretty easy to apply, just a few methods.</li> </ul> </li> </ul> </li> </ul>"},{"location":"ft_irc/#backlog","title":"Backlog","text":""},{"location":"ft_irc/#sprints","title":"Sprints","text":"<ol> <li>Sprint 1<ol> <li>[[ft_irc - SPRINT 1]]</li> </ol> </li> </ol>"},{"location":"ft_irc/#footnotes","title":"Footnotes","text":"<p>footnote 1</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;cstring&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\nint sockfd = socket(AF_INET, SOCK_STREAM, 0);\nstruct sockaddr_in servaddr;\nbzero(&amp;servaddr, sizeof(servaddr));\nservaddr.sin_family = AF_INET;\nservaddr.sin_port = htons(6667);\ninet_pton(AF_INET, \"127.0.0.1\", &amp;servaddr.sin_addr);\n\nconnect(sockfd, (struct sockaddr*)&amp;servaddr, sizeof(servaddr));\n\nchar recvline[1024];\nmemset(recvline, 0, sizeof(recvline));\nssize_t n = recv(sockfd, recvline, sizeof(recvline), 0);\nstd::cout &lt;&lt; recvline &lt;&lt; std::endl;\n\nstd::string nick = \"testuser\";\nstd::string user = \"testuser\";\nstd::string realname = \"Test User\";\nstd::string channel = \"#test\";\n\nstd::string msg = \"NICK \" + nick + \"\\r\\n\";\nsend(sockfd, msg.c_str(), msg.length(), 0);\nmsg = \"USER \" + user + \" 0 * :\" + realname + \"\\r\\n\";\nsend(sockfd, msg.c_str(), msg.length(), 0);\nmsg = \"JOIN \" + channel + \"\\r\\n\";\nsend(sockfd, msg.c_str(), msg.length(), 0);\n\nwhile (true) {\n    memset(recvline, 0, sizeof(recvline));\n    n = recv(sockfd, recvline, sizeof(recvline), 0);\n    std::cout &lt;&lt; recvline &lt;&lt; std::endl;\n    if (n &lt;= 0) {\n                    break;\n                }\n            }\n\n            close(sockfd);\n\n            return 0;\n        }\n</code></pre> <p>Diagrams @startuml !theme vibrant actor User actor Operator participant TcpListener entity Channel</p> <p>note across: join channel User -&gt; TcpListener: joinChannel(\"channelName\") alt if channel does not exist     TcpListener -&gt; TcpListener: createChannel(\"channelName\")     TcpListener -&gt; Channel: new Channel(\"channelName\") end TcpListener -&gt; Channel: addUser(user) Channel -&gt; User: joinChannel(channel)</p> <p>note across: leave channel User -&gt; TcpListener: leaveChannel(\"channelName\") TcpListener -&gt; Channel: removeUser(user) Channel -&gt; User: leaveChannel(channel) alt no users left in channel     TcpListener -&gt; TcpListener: deleteChannel(\"channelName\") end @enduml Another == @startuml actor User actor Operator participant IRCServer participant Channel</p> <p>User -&gt; IRCServer: joinChannel(\"channelName\") alt channel does not exist     IRCServer -&gt; IRCServer: createChannel(\"channelName\")     IRCServer -&gt; Channel: new Channel(\"channelName\") end IRCServer -&gt; Channel: addUser(user) Channel -&gt; User: joinChannel(channel)</p> <p>Operator -&gt; IRCServer: setOperator(user, \"channelName\") IRCServer -&gt; Channel: setOperator(user) Channel -&gt; Operator: hasPrivilege(\"setOperator\") alt has privilege     Channel -&gt; Channel: operators.insert(ChannelOperator(user, channel)) end</p> <p>Operator -&gt; IRCServer: unsetOperator(user, \"channelName\") IRCServer -&gt; Channel: unsetOperator(user) Channel -&gt; Operator: hasPrivilege(\"unsetOperator\") alt has privilege     Channel -&gt; Channel: operators.erase(ChannelOperator(user, channel)) end @enduml</p>"},{"location":"Features/LaTeX%20Math%20Support/","title":"LaTeX Math Support","text":"<p>LaTeX math is supported using MathJax.</p> <p>Inline math looks like \\(f(x) = x^2\\). The input for this is <code>$f(x) = x^2$</code>. Use <code>$...$</code>.</p> <p>For a block of math, use <code>$$...$$</code> on separate lines</p> <pre><code>$$\nF(x) = \\int^a_b \\frac{1}{2}x^4\n$$\n</code></pre> <p>gives </p> \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]"},{"location":"Features/Mermaid%20Diagrams/","title":"Mermaid diagrams","text":"<p>Here's the example from MkDocs Material documentation: </p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];\n</code></pre>"},{"location":"Features/Text%20Formatting/","title":"Text Formatting","text":"<p>You can have lists like this</p> <ul> <li>first</li> <li>second</li> <li>third</li> </ul> <p>Or checklist lists to</p> <ul> <li> Get</li> <li> things</li> <li> done</li> </ul> <p>Also, get highlights and strikethroughs as above (similar to Obsidian).</p> <p>More formatting options for your webpage here. (but not compatible with Obsidian)</p>"},{"location":"Topic%201/Note%201/","title":"Note 1","text":"<p>Example: link to Mermaid Diagrams under <code>Features</code></p>"},{"location":"Topic%201/Note%202/","title":"Note 2","text":""}]}